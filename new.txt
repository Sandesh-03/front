/* ==================== GLOBAL STYLES ==================== */
        :root {
            --primary: #1A76D1;
            --primary-dark: #1565c0;
            --primary-light: #e3f2fd;
            --secondary: #2C2D3F;
            --accent: #32B87D;
            --light-bg: #f8f9fa;
            --text-dark: #2C2D3F;
            --text-light: #666;
            --white: #ffffff;
            --border: #e6e6e6;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            font-weight: 400;
            font-size: 14px;
            color: #666;
            line-height: 1.6;
            background-color: var(--white);
            overflow-x: hidden;
        }
        
        a {
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        ul {
            list-style: none;
        }
        
        img {
            max-width: 100%;
            height: auto;
        }
        
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 28px;
            background-color: var(--primary);
            color: var(--white);
            border-radius: 4px;
            font-weight: 500;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(26, 118, 209, 0.3);
        }
        
        .btn-outline {
            background-color: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-outline:hover {
            background-color: var(--primary);
            color: var(--white);
        }
        
        .section-title {
            text-align: center;
            margin-bottom: 50px;
        }
        
        .section-title h2 {
            font-size: 36px;
            color: var(--text-dark);
            margin-bottom: 15px;
            position: relative;
            display: inline-block;
        }
        
        .section-title h2:after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background-color: var(--primary);
        }
        
        .section-title p {
            color: var(--text-light);
            max-width: 700px;
            margin: 0 auto;
        }
        
        /* ==================== PRELOADER ==================== */
        #preloader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--white);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }
        
        .loader {
            width: 50px;
            height: 50px;
            border: 5px solid var(--primary-light);
            border-top: 5px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* ==================== HEADER ==================== */
        .header {
            background-color: var(--white);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-inner {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }
        
        .logo {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
        }
        
        .logo span {
            color: var(--secondary);
        }
        
        .nav-menu {
            display: flex;
        }
        
        .nav-menu li {
            margin: 0 15px;
        }
        
        .nav-menu a {
            color: var(--text-dark);
            font-weight: 500;
            position: relative;
        }
        
        .nav-menu a:after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background-color: var(--primary);
            transition: width 0.3s ease;
        }
        
        .nav-menu a:hover:after,
        .nav-menu a.active:after {
            width: 100%;
        }
        
        .nav-menu a:hover,
        .nav-menu a.active {
            color: var(--primary);
        }
        
        .header-cta .btn {
            margin-left: 15px;
        }
        
        /* ==================== HERO SECTION ==================== */
        .hero {
            padding: 100px 0;
            background: linear-gradient(to right, rgba(255, 255, 255, 0.9), rgba(227, 242, 253, 0.7)), url('https://images.unsplash.com/photo-1532938911079-1b06ac7ceec7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80');
            background-size: cover;
            background-position: center;
        }
        
        .hero-content {
            max-width: 600px;
        }
        
        .hero h1 {
            font-size: 48px;
            color: var(--text-dark);
            margin-bottom: 20px;
            line-height: 1.2;
        }
        
        .hero h1 span {
            color: var(--primary);
        }
        
        .hero p {
            font-size: 18px;
            color: var(--text-light);
            margin-bottom: 30px;
        }
        
        .hero-buttons .btn {
            margin-right: 15px;
        }
        
        /* ==================== SERVICES SECTION ==================== */
        .services {
            padding: 80px 0;
            background-color: var(--white);
        }
        
        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }
        
        .service-card {
            background-color: var(--white);
            border-radius: 8px;
            padding: 30px;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
        }
        
        .service-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .service-icon {
            width: 70px;
            height: 70px;
            background-color: var(--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        
        .service-icon i {
            font-size: 30px;
            color: var(--primary);
        }
        
        .service-card h3 {
            font-size: 20px;
            color: var(--text-dark);
            margin-bottom: 15px;
        }
        
        .service-card p {
            color: var(--text-light);
            margin-bottom: 20px;
        }
        
        .service-card a {
            color: var(--primary);
            font-weight: 500;
            display: flex;
            align-items: center;
        }
        
        .service-card a i {
            margin-left: 5px;
            transition: transform 0.3s ease;
        }
        
        .service-card a:hover i {
            transform: translateX(5px);
        }
        
        /* ==================== ABOUT SECTION ==================== */
        .about {
            padding: 80px 0;
            background-color: var(--light-bg);
        }
        
        .about-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 50px;
            align-items: center;
        }
        
        .about-image {
            position: relative;
        }
        
        .about-image img {
            border-radius: 8px;
            box-shadow: var(--shadow);
        }
        
        .about-text h2 {
            font-size: 36px;
            color: var(--text-dark);
            margin-bottom: 20px;
        }
        
        .about-text p {
            color: var(--text-light);
            margin-bottom: 30px;
        }
        
        .about-features {
            margin-top: 30px;
        }
        
        .about-feature {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .about-feature i {
            width: 24px;
            height: 24px;
            background-color: var(--primary-light);
            color: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 12px;
        }
        
        /* ==================== DOCTORS SECTION ==================== */
        .doctors {
            padding: 80px 0;
            background-color: var(--white);
        }
        
        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
        }
        
        .doctor-card {
            background-color: var(--white);
            border-radius: 8px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
        }
        
        .doctor-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .doctor-image {
            height: 250px;
            overflow: hidden;
        }
        
        .doctor-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }
        
        .doctor-card:hover .doctor-image img {
            transform: scale(1.1);
        }
        
        .doctor-info {
            padding: 20px;
            text-align: center;
        }
        
        .doctor-info h3 {
            font-size: 20px;
            color: var(--text-dark);
            margin-bottom: 5px;
        }
        
        .doctor-info p {
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .doctor-social {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        
        .doctor-social a {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background-color: var(--primary-light);
            color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .doctor-social a:hover {
            background-color: var(--primary);
            color: var(--white);
        }
        
        /* ==================== TESTIMONIALS SECTION ==================== */
        .testimonials {
            padding: 80px 0;
            background-color: var(--light-bg);
        }
        
        .testimonials-container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .testimonial-card {
            background-color: var(--white);
            border-radius: 8px;
            padding: 30px;
            box-shadow: var(--shadow);
            margin: 20px;
            position: relative;
        }
        
        .testimonial-card:before {
            content: '\201C';
            font-size: 60px;
            color: var(--primary-light);
            position: absolute;
            top: 10px;
            left: 20px;
            font-family: Arial, sans-serif;
        }
        
        .testimonial-text {
            color: var(--text-light);
            font-style: italic;
            margin-bottom: 20px;
            position: relative;
            z-index: 1;
        }
        
        .testimonial-author {
            display: flex;
            align-items: center;
        }
        
        .testimonial-author img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 15px;
        }
        
        .author-info h4 {
            color: var(--text-dark);
            margin-bottom: 5px;
        }
        
        .author-info p {
            color: var(--primary);
            font-size: 14px;
        }
        
        /* ==================== APPOINTMENT SECTION ==================== */
        .appointment {
            padding: 80px 0;
            background: linear-gradient(to right, rgba(26, 118, 209, 0.9), rgba(44, 45, 63, 0.8)), url('https://images.unsplash.com/photo-1586773860418-d37222d8fce3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80');
            background-size: cover;
            background-position: center;
            color: var(--white);
        }
        
        .appointment .section-title h2 {
            color: var(--white);
        }
        
        .appointment .section-title h2:after {
            background-color: var(--white);
        }
        
        .appointment .section-title p {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .appointment-form {
            max-width: 600px;
            margin: 0 auto;
            background-color: var(--white);
            padding: 40px;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            color: var(--text-dark);
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(26, 118, 209, 0.1);
        }
        
        .form-btn {
            text-align: center;
            margin-top: 30px;
        }
        
        /* ==================== FOOTER ==================== */
        .footer {
            background-color: var(--secondary);
            color: var(--white);
            padding: 60px 0 30px;
        }
        
        .footer-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-bottom: 50px;
        }
        
        .footer-widget h3 {
            font-size: 20px;
            margin-bottom: 20px;
            position: relative;
            padding-bottom: 10px;
        }
        
        .footer-widget h3:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 40px;
            height: 2px;
            background-color: var(--primary);
        }
        
        .footer-links li {
            margin-bottom: 12px;
        }
        
        .footer-links a {
            color: rgba(255, 255, 255, 0.7);
            display: flex;
            align-items: center;
        }
        
        .footer-links a i {
            margin-right: 8px;
            font-size: 12px;
        }
        
        .footer-links a:hover {
            color: var(--white);
            padding-left: 5px;
        }
        
        .footer-contact li {
            display: flex;
            margin-bottom: 15px;
        }
        
        .footer-contact i {
            margin-right: 15px;
            color: var(--primary);
        }
        
        .footer-contact span {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .footer-bottom {
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .footer-bottom p {
            color: rgba(255, 255, 255, 0.6);
        }
        
        /* ==================== RESPONSIVE STYLES ==================== */
        @media (max-width: 992px) {
            .about-content {
                grid-template-columns: 1fr;
            }
            
            .hero h1 {
                font-size: 36px;
            }
        }
        
        @media (max-width: 768px) {
            .nav-menu {
                display: none;
            }
            
            .hero {
                text-align: center;
                padding: 80px 0;
            }
            
            .hero-content {
                margin: 0 auto;
            }
            
            .section-title h2 {
                font-size: 28px;
            }
        }
        
        @media (max-width: 576px) {
            .hero h1 {
                font-size: 28px;
            }
            
            .hero-buttons .btn {
                display: block;
                margin: 0 0 15px 0;
                width: 100%;
            }
            
            .appointment-form {
                padding: 25px;
            }
        }








1. Create Data Service (src/services/data.service.ts)
typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User, Appointment, Report, PatientProfile, DoctorProfile } from '../models/user.model';
import { AuthService } from './auth.service';
import { environment } from '../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private baseUrl = environment.apiUrl;

  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {}

  private getAuthHeaders() {
    const token = this.authService.getToken();
    return {
      headers: { 'Authorization': `Bearer ${token}` }
    };
  }

  // User methods
  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.baseUrl}/api/Users`, this.getAuthHeaders());
  }

  getUserById(id: number): Observable<User> {
    return this.http.get<User>(`${this.baseUrl}/api/Users/${id}`, this.getAuthHeaders());
  }

  // Doctor methods
  getDoctors(): Observable<User[]> {
    return this.http.get<User[]>(`${this.baseUrl}/api/Doctors`, this.getAuthHeaders());
  }

  getDoctorById(id: number): Observable<User> {
    return this.http.get<User>(`${this.baseUrl}/api/Doctors/${id}`, this.getAuthHeaders());
  }

  // Patient methods
  getPatients(): Observable<User[]> {
    return this.http.get<User[]>(`${this.baseUrl}/api/Patients`, this.getAuthHeaders());
  }

  getPatientById(id: number): Observable<User> {
    return this.http.get<User>(`${this.baseUrl}/api/Patients/${id}`, this.getAuthHeaders());
  }

  // Appointment methods
  getAppointments(): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${this.baseUrl}/api/Appointments`, this.getAuthHeaders());
  }

  getAppointmentsByPatient(patientId: number): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${this.baseUrl}/api/Appointments/patient/${patientId}`, this.getAuthHeaders());
  }

  getAppointmentsByDoctor(doctorId: number): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${this.baseUrl}/api/Appointments/doctor/${doctorId}`, this.getAuthHeaders());
  }

  createAppointment(appointmentData: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/api/Appointments`, appointmentData, this.getAuthHeaders());
  }

  updateAppointment(appointmentId: number, updateData: Partial<Appointment>): Observable<any> {
    return this.http.put(`${this.baseUrl}/api/Appointments/${appointmentId}`, updateData, this.getAuthHeaders());
  }

  updateAppointmentStatus(appointmentId: number, status: string): Observable<any> {
    return this.http.patch(`${this.baseUrl}/api/Appointments/${appointmentId}/status`, { status }, this.getAuthHeaders());
  }

  // Report methods
  getReports(): Observable<Report[]> {
    return this.http.get<Report[]>(`${this.baseUrl}/api/Reports`, this.getAuthHeaders());
  }

  generateReport(type: string, userId: number, title: string, data: any): Observable<Report> {
    return this.http.post<Report>(`${this.baseUrl}/api/Reports`, {
      type,
      userId,
      title,
      data
    }, this.getAuthHeaders());
  }

  // Profile methods
  updatePatientProfile(patientId: number, profile: PatientProfile): Observable<User> {
    return this.http.put<User>(`${this.baseUrl}/api/Patients/${patientId}/profile`, profile, this.getAuthHeaders());
  }

  updateDoctorProfile(doctorId: number, profile: DoctorProfile): Observable<User> {
    return this.http.put<User>(`${this.baseUrl}/api/Doctors/${doctorId}/profile`, profile, this.getAuthHeaders());
  }
}
2. Updated Auth Service (src/services/auth.service.ts)
typescript
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, tap } from 'rxjs';
import { DoctorProfile, User } from '../models/user.model';
import { HttpClient } from '@angular/common/http';
import { environment } from '../environments/environment';

interface AuthResponse {
  token: string;
  user?: User;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$: Observable<User | null> = this.currentUserSubject.asObservable();

  private authBaseUrl = `${environment.apiUrl}/api/Auth`;

  constructor(private httpsvc: HttpClient) {
    this.loadStoredUser();
  }

  private loadStoredUser(): void {
    const storedUser = localStorage.getItem('currentUser');
    if (storedUser) {
      this.currentUserSubject.next(JSON.parse(storedUser));
    }
  }

  login(email: string, password: string): Observable<AuthResponse> {
    const credentials = { Email: email, password };
    
    return this.httpsvc.post<AuthResponse>(`${this.authBaseUrl}/login`, credentials).pipe(
      tap(response => {
        if (response.token) {
          localStorage.setItem('authToken', response.token);
          
          if (response.user) {
            this.setCurrentUser(response.user);
          } else {
            this.fetchCurrentUser().subscribe({
              next: (user) => this.setCurrentUser(user),
              error: (err) => console.error('Failed to fetch user:', err)
            });
          }
        }
      })
    );
  }

  register(profile: any): Observable<any> {
    const user = { 
      Email: profile.Email, 
      password: profile.password, 
      role: profile.role 
    };

    return this.httpsvc.post(`${this.authBaseUrl}/register`, user);
  }

  logout(): void {
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  getCurrentUser(): User | null {
    return this.currentUserSubject.value;
  }

  isLoggedIn(): boolean {
    return !!localStorage.getItem('authToken');
  }

  hasRole(role: string): boolean {
    const user = this.getCurrentUser();
    return user ? user.role === role : false;
  }

  fetchCurrentUser(): Observable<User> {
    const token = this.getToken();
    return this.httpsvc.get<User>(`${this.authBaseUrl}/me`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
  }

  setCurrentUser(user: User): void {
    localStorage.setItem('currentUser', JSON.stringify(user));
    this.currentUserSubject.next(user);
  }

  getToken(): string | null {
    return localStorage.getItem('authToken');
  }

  updateUserProfile(userId: string, profile: DoctorProfile): Observable<User> {
    const token = this.getToken();
    return this.httpsvc.put<User>(`${this.authBaseUrl}/users/${userId}/profile`, profile, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
  }
}
3. Updated Environment Files
src/environments/environment.ts
typescript
export const environment = {
  production: false,
  apiUrl: 'http://localhost:4002', // Your auth service port
  doctorApiUrl: 'http://localhost:4004',
  patientApiUrl: 'http://localhost:4005',
  appointmentApiUrl: 'http://localhost:5131'
};
src/environments/environment.prod.ts
typescript
export const environment = {
  production: true,
  apiUrl: 'https://your-production-domain.com/api',
  doctorApiUrl: 'https://your-production-domain.com/doctor-api',
  patientApiUrl: 'https://your-production-domain.com/patient-api',
  appointmentApiUrl: 'https://your-production-domain.com/appointment-api'
};
4. Updated Doctors List Component (src/components/patient/doctors-list.component.ts)
typescript
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { User, DoctorProfile } from '../../models/user.model';
import { FormsModule, NgForm } from '@angular/forms';
import { DataService } from '../../services/data.service';

@Component({
  selector: 'app-doctors-list',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  template: `
    <div class="container-fluid">
      <div class="row">
        <!-- Sidebar -->
        <nav class="col-md-3 col-lg-2 d-md-block bg-primary sidebar collapse">
          <div class="position-sticky pt-3">
            <div class="text-center text-white mb-4">
              <h5>Patient Panel</h5>
            </div>
            <ul class="nav flex-column">
              <li class="nav-item">
                <a class="nav-link text-white" routerLink="/patient">
                  <i class="bi bi-house-door me-2"></i>Dashboard
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link text-white" routerLink="/patient/doctors" routerLinkActive="active">
                  <i class="bi bi-person-badge me-2"></i>Find Doctors
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link text-white" routerLink="/patient/appointments">
                  <i class="bi bi-calendar-check me-2"></i>My Appointments
                </a>
              </li>
              <li class="nav-item">
                <a class="nav-link text-white" routerLink="/patient/history">
                  <i class="bi bi-clock-history me-2"></i>Medical History
                </a>
              </li>
              <li class="nav-item mt-3">
                <a class="nav-link text-white" href="#" (click)="logout()">
                  <i class="bi bi-box-arrow-right me-2"></i>Logout
                </a>
              </li>
            </ul>
          </div>
        </nav>

        <!-- Main content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">Find Doctors</h1>
          </div>

          <!-- Search and Filter -->
          <div class="row mb-4">
            <div class="col-md-6">
              <input 
                type="text" 
                class="form-control" 
                placeholder="Search by name or specialization..."
                [(ngModel)]="searchTerm"
                (input)="filterDoctors()">
            </div>
            <div class="col-md-4">
              <select class="form-select" [(ngModel)]="specializationFilter" (change)="filterDoctors()">
                <option value="">All Specializations</option>
                <option *ngFor="let spec of specializations" [value]="spec">{{ spec }}</option>
              </select>
            </div>
          </div>

          <!-- Doctors Grid -->
          <div class="row">
            <div *ngFor="let doctor of filteredDoctors" class="col-md-6 col-lg-4 mb-4">
              <div class="card h-100 shadow-sm">
                <div class="card-body">
                  <div class="d-flex align-items-center mb-3">
                    <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-3" 
                         style="width: 50px; height: 50px;">
                      <i class="bi bi-person-fill text-white fs-4"></i>
                    </div>
                    <div>
                      <h5 class="card-title mb-1">Dr. {{ getDoctorProfile(doctor).fullName }}</h5>
                      <small class="text-muted">{{ getDoctorProfile(doctor).specialization }}</small>
                    </div>
                  </div>
                  
                  <div class="mb-3">
                    <p class="card-text">
                      <strong>Qualification:</strong> {{ getDoctorProfile(doctor).qualification }}<br>
                      <strong>Experience:</strong> {{ getDoctorProfile(doctor).experience }} years<br>
                      <strong>Fee:</strong> ₹{{ getDoctorProfile(doctor).consultationFee }}<br>
                      <strong>Phone:</strong> {{ getDoctorProfile(doctor).phone }}
                    </p>
                  </div>

                  <div class="mb-3">
                    <h6 class="text-primary">Available Days:</h6>
                    <div class="d-flex flex-wrap gap-1">
                      <span *ngFor="let slot of getDoctorProfile(doctor).availableSlots" 
                            class="badge bg-secondary">{{ slot.day }}</span>
                    </div>
                  </div>
                </div>
                <div class="card-footer bg-transparent">
                  <button class="btn btn-primary w-100" (click)="openBookingModal(doctor)">
                    Book Appointment
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div *ngIf="filteredDoctors.length === 0" class="text-center py-5">
            <i class="bi bi-person-x fs-1 text-muted"></i>
            <p class="text-muted mt-3">No doctors found matching your criteria.</p>
          </div>
        </main>
      </div>
    </div>

    <!-- Booking Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <form *ngIf="selectedDoctor" #bookingForm="ngForm" (ngSubmit)="bookAppointment(bookingForm)">
            <div class="modal-header">
              <h5 class="modal-title">Book Appointment</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">Doctor</label>
                <input type="text" class="form-control" 
                       [value]="'Dr. ' + getDoctorProfile(selectedDoctor).fullName"
                       readonly>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Appointment Date</label>
                <input type="date" class="form-control" name="appointmentDate" 
                       [(ngModel)]="bookingData.appointmentDate" 
                       [min]="getMinDate()" required>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Appointment Time</label>
                <select class="form-select" name="appointmentTime" 
                        [(ngModel)]="bookingData.appointmentTime" required>
                  <option value="">Select time</option>
                  <option *ngFor="let time of availableTimes" [value]="time">{{ time }}</option>
                </select>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Symptoms/Reason for visit</label>
                <textarea class="form-control" name="symptoms" 
                          [(ngModel)]="bookingData.symptoms" 
                          rows="3" required></textarea>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary" [disabled]="!bookingForm.form.valid">
                Book Appointment
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  `
})
export class DoctorsListComponent implements OnInit {
  doctors: User[] = [];
  filteredDoctors: User[] = [];
  specializations: string[] = [];
  searchTerm = '';
  specializationFilter = '';
  selectedDoctor: User | null = null;
  
  bookingData = {
    appointmentDate: '',
    appointmentTime: '',
    symptoms: ''
  };

  availableTimes = [
    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
    '12:00', '12:30', '14:00', '14:30', '15:00', '15:30',
    '16:00', '16:30', '17:00', '17:30'
  ];

  constructor(
    private dataService: DataService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    this.loadDoctors();
  }

  loadDoctors(): void {
    this.dataService.getDoctors().subscribe({
      next: (doctors) => {
        this.doctors = doctors;
        this.filteredDoctors = [...this.doctors];
        
        // Extract unique specializations
        this.specializations = [...new Set(
          this.doctors.map(d => this.getDoctorProfile(d).specialization)
        )];
      },
      error: (error) => {
        console.error('Error loading doctors:', error);
        alert('Failed to load doctors. Please try again.');
      }
    });
  }

  filterDoctors(): void {
    this.filteredDoctors = this.doctors.filter(doctor => {
      const profile = this.getDoctorProfile(doctor);
      const lowerSearch = this.searchTerm.toLowerCase();
      const matchesSearch = !this.searchTerm || 
        profile.fullName.toLowerCase().includes(lowerSearch) ||
        profile.specialization.toLowerCase().includes(lowerSearch);
      
      const matchesSpecialization = !this.specializationFilter || 
        profile.specialization === this.specializationFilter;
      
      return matchesSearch && matchesSpecialization;
    });
  }

  getDoctorProfile(doctor: User): DoctorProfile {
    return doctor.profile as DoctorProfile;
  }

  openBookingModal(doctor: User): void {
    this.selectedDoctor = doctor;
    this.bookingData = {
      appointmentDate: '',
      appointmentTime: '',
      symptoms: ''
    };
    
    // Show modal using Bootstrap
    const modal = new (window as any).bootstrap.Modal(document.getElementById('bookingModal'));
    modal.show();
  }

  getMinDate(): string {
    const today = new Date();
    return today.toISOString().split('T')[0];
  }

  bookAppointment(form: NgForm): void {
    if (form.valid && this.selectedDoctor) {
      const currentUser = this.authService.getCurrentUser();
      if (!currentUser) return;

      const appointmentData = {
        patientId: currentUser.id,
        doctorId: this.selectedDoctor.id,
        date: this.bookingData.appointmentDate,
        timeSlot: this.bookingData.appointmentTime,
        reason: this.bookingData.symptoms,
        status: 'Pending'
      };

      this.dataService.createAppointment(appointmentData).subscribe({
        next: (result) => {
          alert('Appointment booked successfully!');
          // Close modal
          const modal = (window as any).bootstrap.Modal.getInstance(document.getElementById('bookingModal'));
          modal.hide();
        },
        error: (error) => {
          alert('Error booking appointment: ' + error.message);
        }
      });
    }
  }

  logout(): void {
    this.authService.logout();
  }
}
5. Updated Auth Guard (src/guards/auth.guard.ts)
typescript
import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot): boolean {
    if (this.authService.isLoggedIn()) {
      const requiredRole = route.data?.['role'];
      if (requiredRole && !this.authService.hasRole(requiredRole)) {
        this.router.navigate(['/unauthorized']);
        return false;
      }
      return true;
    }
    
    this.router.navigate(['/login']);
    return false;
  }
}
