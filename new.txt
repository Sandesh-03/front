ðŸ“‚ src/services/auth.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { User } from '../models/user.model';

interface AuthResponse {
  token: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$: Observable<User | null> = this.currentUserSubject.asObservable();

  private authBaseUrl = 'http://localhost:4002/api/Auth';

  constructor(private http: HttpClient) {}

  // --- Registration ---
  register(profile: { email: string; password: string; role: 'Admin' | 'Doctor' | 'Patient'; fullName?: string }) {
    const body = {
      email: profile.email,
      password: profile.password,
      role: profile.role,
      fullName: profile.fullName
    };
    return this.http.post(`${this.authBaseUrl}/register`, body);
  }

  // --- Login ---
  login(email: string, password: string) {
    const body = { email, password };
    return this.http.post<AuthResponse>(`${this.authBaseUrl}/login`, body).pipe(
      tap((res: AuthResponse) => {
        localStorage.setItem('authToken', res.token);
        this.setCurrentUserFromToken(res.token);
      })
    );
  }

  // --- Profile ---
  getProfile(): Observable<User> {
    return this.http.get<User>(`${this.authBaseUrl}/me`);
  }

  // --- Logout ---
  logout(): void {
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  // --- Helpers ---
  isLoggedIn(): boolean {
    return !!localStorage.getItem('authToken');
  }

  getCurrentUser(): User | null {
    const live = this.currentUserSubject.value;
    if (live) return live;

    const token = localStorage.getItem('authToken');
    if (!token) return null;

    const user = this.decodeUserFromToken(token);
    if (user) this.currentUserSubject.next(user);
    return user;
  }

  hasRole(role: string): boolean {
    const user = this.getCurrentUser();
    return !!user && user.role.toLowerCase() === role.toLowerCase();
  }

  // --- Decode JWT ---
  private decodeUserFromToken(token: string): User | null {
    try {
      const [, payloadB64] = token.split('.');
      const json = JSON.parse(atob(payloadB64));

      const ROLE_KEYS = [
        'role',
        'http://schemas.microsoft.com/ws/2008/06/identity/claims/role',
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role'
      ];
      const ID_KEYS = [
        'nameid',
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'
      ];
      const EMAIL_KEYS = [
        'email',
        'unique_name',
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'
      ];
      const NAME_KEYS = ['fullName', 'name'];

      const role =
        ROLE_KEYS.map(k => json[k]).find(v => !!v) ?? 'Patient';
      const idStr = ID_KEYS.map(k => json[k]).find(v => !!v) ?? '0';
      const id = Number(idStr) || 0;
      const email = EMAIL_KEYS.map(k => json[k]).find(v => !!v) ?? '';
      const fullName = NAME_KEYS.map(k => json[k]).find(v => !!v) ?? '';

      return { id, email, role: role as User['role'], fullName };
    } catch {
      return null;
    }
  }

  private setCurrentUserFromToken(token: string): void {
    const user = this.decodeUserFromToken(token);
    if (user) {
      localStorage.setItem('currentUser', JSON.stringify(user));
      this.currentUserSubject.next(user);
    }
  }
}

ðŸ“‚ src/services/auth.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = localStorage.getItem('authToken');

    if (token) {
      const authReq = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
      return next.handle(authReq);
    }

    return next.handle(req);
  }
}

ðŸ“‚ src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

import { AppComponent } from './app.component';
import { AuthInterceptor } from './services/auth.interceptor';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}
